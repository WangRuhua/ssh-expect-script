#!/usr/bin/expect  
#!/usr/bin/expect  -d

#log_file  -a ./txxx
#set log_user  1
if { [llength $argv] < 1 } {
	puts "### USAGE:  $argv0 ip user  passwd port commands"
	exit 1
}

#match_max 600000
match_max 3000

set ip [lindex $argv 0]
set user msdomain1\\rwang4
#set user msdomain1\\psdeploy
#set passwd Maxwell0322
set passwd Farcry0322
#set passwd MBobs0R1
set port 22
set commands [lindex $argv 1]
set commands "su user_0"
set timeout 60
#puts "$ip $user $passwd $port $commands"
#set ip msschunk83
set old_passwd "user@live321"
set new_passwd "2cN#5(j)jI66"
#set old_passwd "2cN#5(j)jI66"
#set new_passwd "user@live321"

#puts "spawn ssh $user@$ip -p$port"

for {} {1} {} {
spawn ssh  -l$user -p$port $ip
expect 	{
	"\$ " {
        send "\r"
        puts "i'm login now\n"
        break;
        }
	"assword:" {
		send "$passwd\r"
		break;
	}

	"yes/no)?" {
		set yesnoflag 1
		send "yes\r"
		break;
	}

	timeout {
		puts "\nERROR: $ip logon TIMEOUT...\n"
		exit 2
	}

	"No route to host" {
		puts "\nERROR: $ip No route to host...\n"
		exit 2
	}

	"\[Cc]onnection \[Rr]efused" {
		puts "\nERROR: $ip Connection Refused...\n"
		exit 2
	}
	"Host key verification failed." {
		puts "\nERROR: $ip Host key verification failed...\n"
		exit 2
	}

	"Illegal host key" {
		puts "\n ERROR: $ip Illegal host key...\n"
		exit 2
	}
		
	"\[Cc]onnection Timed Out" {
		puts "\nERROR: $ip logon TIMEOUT...\n"
		exit 2
	}

	"Interrupted system call" {
		puts "\n$ip ERROR Interrupted system call...\n"
	}

	"Disconnected; connection lost" {
		puts "\n$ip ERROR connection lost...\n"
		exit 2
	}

	"Authentication failed" {
		puts "\n$ip ERROR Authentication failed...\n"
		exit 2
	}

	"Destination Unreachable" {
		puts "\n$ip ERROR Destination Unreachable...\n"
		exit 2
	}
	"Permission denied, please try again.\r\r" {
		puts "\n$ip ERROR password wrong\n"
		exit 2
	}
    "Name or service not known" {
        puts "\n ERROR host:$ip not exist"
        exit 2
    }
}
}
#puts "\n here\n"
expect {
	"\]#" {send "su user_0\r"}
    "\]\$ " {send "su user_0\r"}
    "\$ " {send "su user_0\r"}
	"assword" {
		send "$passwd\r"
		puts "\nPASSWORDERROR: $ip PASSWORD ERROR...\n"
		exit 3
	}
}


expect {
    "user user_0 does not exist\r" { 
        send "exit\r"
        puts "\nERROR host:$ip no user user_0"
        exit 2 
        }

    "incorrect password\r" { 
        puts "\nERROR $ip user_0 passwd wrong ... \n"
        send "exit\r" 
        exit
        expect eof
        }
    
    "\[Pp]assword for MSDOMAIN1\rwang4" { send {"$passwd\r" } }
    "\[Pp]assword:" { send "$old_passwd\r"}
    "\[Pp]assword: " { send "$old_passwd\r"}
	"\]\$ " { puts "what happen?\n"
    send "\r" }
}
#puts "\nhello guys\n"

expect {
    "incorrect password\r*\$ " {
        puts "\nERROR $ip user_0 passwd wrong ... \n"
        send "exit\r"
        exit
        expect eof
    }

    "incorrect password\r" {
        puts "\nERROR $ip user_0 passwd wrong ... \n"
        send "exit\r"
        exit
        expect eof
        }

    "\]\$ " { send "passwd\r"}
}
expect {
    "incorrect password\r" { 
        puts "\nERROR $ip old passwd wrong ... \n"
        send "exit\r" 
        exit
        expect eof
        }
    "(current) NT password: " {
        puts "\nERROR $ip old passwd wrong ... \n"
        send "\r exit\r" 
        exit
        expect eof
        }
    "(current) UNIX password: " { send "$old_passwd\r"}
}

expect {
    "(current) UNIX password: " { send "$old_passwd\r"}
    "New UNIX password: " { send "$new_passwd\r" }
}
expect -exact "\r
Retype new UNIX password: " 
send "$new_passwd\r"

expect "tokens updated successfully.\r"
puts "\nDEBUG host:$ip passwd change successfully\n"
expect {
	"#" {send "sleep 1 \rexit\r"}
	"\$ " {send "sleep 1 \r exit\r"}
	"> " {send "sleep 1 \r"}
	"stop OK" {send "sleep 1 \r"}
	"stop Failed" {send "sleep 1 \r"}
}

expect {
	"#" {send "exit\r"}
	">" {send "exit\r"}
	"\$" {send "exit\r"}
	"> " {send "exit\r"}
	"\$ " {send "exit\r"}
}

expect eof {
	puts "\[info\] remote sudo : $ip\n"
	exit 0;
}
